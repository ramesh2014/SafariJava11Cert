Questions
---------

Which are legal:

A) { int x; }
   { int x; }
B) class X {
     {
       sout(x);
     }
     int x;
   }
C) {
     int x;
     {
        int x;
     }
   }
D) {
     int x;
     Predicate<String> ps = x -> true;
   }
E) for (int x = 0; x < 10; x++)
     ;
    int x;

----------------------------
Which are legal:

A) class X {
  var x = 99;
}

B) void doStuff(var x) { }

C) void doStuff() {
  var x;
  x = 100;
}

D) void doStuff() {
  var x = 100;
}

E) void doStuff() {
  var x = { 1, 2, 3 };
}

----------------------------
Which are legal:

A) void doStuff() {
  var x = new int[]{ 1, 2, 3 };
}

B) void doStuff() {
  var [] x = new int[]{ 1, 2, 3 };
}

C) void doStuff() {
  var x = 99;
  x = "Hello";
}

D) void doStuff() {
  var x = 1, y = 2;
}

E)
void doStuff() {
  try {
   // stuff happens 
   } catch (var ex) {
   }
}

----------------------------
Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);
   
B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));
   
C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));
   
D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));
   
E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

----------------------------
What is the result:

int i = 10;
System.out.println(i++ + --i);
System.out.println(i);   

A)
20
10

B)
19
10

C)
20
9

D)
19
9

----------------------------
What is the result:

int [] ia1 = {1,2,3};
int [] ia2 = {-1,-2,-3};
int [] ia = ia2;
System.out.println(ia[(ia=ia1)[0]]);

A) Exception at runtime
B) 1
C) 2
D) -1
E) -2

----------------------------
What is the scope of a private element?
A) Only visible in the declaring class
B) Visible in any class in the same package
C) Visible in the declaring class and its subclasses  
D) Visible in the package and in subclasses
E) None of the above
-- answer "anywhere inside the enclosing TOP LEVEL curly braces
-- surrounding the declaration.

----------------------------
Given:
  class Base {
    void doBaseStuff() {
      System.out.println("doBaseStuff");
    }
  }

  class Sub extends Base {
    void doBaseStuff() {
      System.out.println("doSubStuff");
    }
    void doOtherStuff() {
      System.out.println("doOtherStuff");
    }
  }

  In the Base and Sub classes, which are true in isolation?
  A) doBaseStuff in Base can be marked public without causing errors
  B) doBaseStuff in Base can be marked private without causing errors
  C) doBaseStuff in Sub can be marked public without causing errors
  D) doBaseStuff in Sub can be marked protected without causing errors
  E) doBaseStuff in Sub can be marked private without causing errors

----------------------------
Given:

  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
  }

In the Base and Sub classes, which are true in isolation?

A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

----------------------------
Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here {
      // handle both exceptions
    }
  }
What can be inserted at "enter code here"
to provide handling of exceptions from both
methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

----------------------------
Given
  void doStuff() throws SQLException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() throws XXX {
    try {
      doStuff();
      doStuff2();
    } catch (SQLException | FileNotFoundException e) {
      throw e;
    }
  }

What is best inserted at XXX?
A) throws Exception
B) throws SQLException
C) throws FileNotFoundException
D) throws FileNotFoundException, SQLException
E) nothing is needed, compilation succeeds as is

----------------------------
Given:
class AC1 implements AutoCloseable {
  @Override
  public void close() {
    System.out.println("Closing AC1");
  }
}
class AC2 implements AutoCloseable {
  @Override
  public void close() {
    System.out.println("Closing AC2");
  }
}

And:
  try (
    var AC1 = new AC1();
    var AC2 = new AC2();
  ) {
  }

What is the result?
A) Compilation fails

B) Exception at runtime halts the program

C) Closing AC1
   Closing AC2

D) Closing AC2
   Closing AC1

E) Closing AC1

----------------------------
Given:
  try (
    var fr = new FileReader("main.txt"); // line n1
    var br = new BufferedReader(fr);     // line n2
  ){
    if (!br.ready()) {
      br = new BufferedReader(new FileReader("backup.txt")); // line n3
    }
    String line;
    while ((line = br.readLine()) != null)
      System.out.println(">> " + line);
  }

What is the result?
A) Compilation fails at line n1
B) Compilation fails at line n2
C) Compilation fails at line n3
D) If main.txt is readable, its contents are shown,
   but if not, the contents of backup.txt are shown
E) If main.txt is readable, its contents are shown
   but if not, the program exits with an unhandled exception

----------------------------
Given:
  var fr = new FileReader("main.txt");
  try (
       // line n1
  ){
    BufferedReader br = new BufferedReader(fr);
    String line;
    while ((line = br.readLine()) != null)
      System.out.println(">> " + line);
  }
  fr = null;

What should be added at line n1 for successful compilation?
A) fr;
B) final fr;
C) var fr2 = fr;
D) This cannot be achieved with change restricted to line n1

----------------------------
Given
class AC3 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    System.out.println("Closing");
    throw new SQLException();
  }
}

And:
    try (
        var one = new AC3();
        var two = new AC3();
        ){
    }

What is the result (choose ONLY ONE)?
A) Compilation fails

B) Closing
   Closing

C) Closing
   SQLException halts the program

D) Closing
   Closing
   SQLException halts the program

E) No output, SQLException halts the program

----------------------------
Given
class AC4 implements AutoCloseable {
  @Override
  public void close() throws Exception {
    throw new SQLException();
  }
}

And:
    try (
      var one = new AC3();
      var two = new AC3();
    ){
      throw new FileNotFoundException();
    }

Which are true?
A) Compilation fails
B) A FileNotFoundException is thrown to the caller
C) An SQLException is thrown to the caller
D) close methods of resources "one" and "two" are called
E) close methods of resources "one" and "two" are not both called

----------------------------


